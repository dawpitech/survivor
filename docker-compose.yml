services:
  traefik:
    image: traefik:v2.10
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--api.insecure=true"
    ports:
      - "80:80"
      - "8080:8080" # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    profiles: [frontend, backend]
  
  db:
    image: postgres:16
    profiles: [db, backend]
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: JEB_data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d JEB_data" ]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s

  migrate:
    profiles: [backend]
    build:
      context: backend
      target: builder
    command: "go run migrate/migrate.go"
    depends_on:
      db:
        condition: service_healthy
    environment:
      GIN_MODE: ${MODE}
      DB_URL: "host=db user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} dbname=JEB_data port=5432 sslmode=disable"
    restart: "no"

  api:
    profiles: [backend]
    build:
      context: backend
      target: release
    depends_on:
      migrate:
        condition: service_completed_successfully
    environment:
      API_URL: ${API_URL}
      API_KEY: ${API_KEY}
      GIN_MODE: ${MODE}
      JWT_MASTER_SECRET: ${JWT_MASTER_SECRET}
      DB_URL: "host=db user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} dbname=JEB_data port=5432 sslmode=disable"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`) && !PathPrefix(`/api/docs`) && !PathPrefix(`/api/dashboard`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=24680"

  frontend:
    profiles: [frontend]
    build:
      context: frontend
      target: runner
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  swagger:
    profiles: [backend]
    image: swaggerapi/swagger-ui
    depends_on: [ api ]
    environment:
      SWAGGER_JSON_URL: "http://localhost/api/openapi.json"
      BASE_URL: "/api/docs"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.swagger.rule=PathPrefix(`/api/docs`)"
      - "traefik.http.routers.swagger.entrypoints=web"
      - "traefik.http.services.swagger.loadbalancer.server.port=8080"

  prometheus:
    profiles: [backend]
    depends_on: [api]
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped

  grafana:
    profiles: [backend]
    depends_on: [prometheus]
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SERVER_ROOT_URL=/api/dashboard
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=PathPrefix(`/api/dashboard`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.grafana-strip.stripprefix.prefixes=/api/dashboard"
      - "traefik.http.routers.grafana.middlewares=grafana-strip"
